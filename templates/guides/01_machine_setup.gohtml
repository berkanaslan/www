<div class="breadcrumbs">
  <a href="/">Go Resources</a>
  / <a href="/guides/machine_setup">Machine Setup</a>
</div>
<div class="body container">
  <h1>Machine Setup</h1>
  <p>
    This guide will show you how to install all the software needed to write
    programs in Go. Two operating systems are shown:
    <a href="#windows">Windows</a> and
    <a href="#osx">OSX</a>.
  </p>
  <h2 id="windows">Windows</h2>
  <h3 id="windows-install-github">Install Git</h3>
  <p>
    On windows you should install msysgit.
    Download the installer from
    <a href="https://msysgit.github.io/">msysgit.github.io</a>
    and run it. When it asks about <q>Adjusting your PATH environment</q>, make sure
    to choose the 2nd option: <q>Use Git from the Windows Command Prompt</q>.
  </p>

  <h3 id="windows-install-go">Install Go</h3>
  <p>
    The go toolchain is required to build go programs. You can download an
    installer from <a href="https://golang.org/dl/">golang.org/dl</a>. Choose
    the latest version available for windows (eg
    <code>go1.4.2.windows-amd64.msi</code>).
  </p>

  <h3 id="windows-setup-gopath">Setup Your GOPATH</h3>
  <p>
    Go looks for source code, packages and binaries in two places:
    <code>GOROOT</code> (<code>C:\Go</code> by default)
    and <code>GOPATH</code>. There's nothing we need to do for the
    <code>GOROOT</code>, but for the <code>GOPATH</code> we need to create a
    folder and a corresponding environmental variable.
  </p>
  <h4>Environment Variable</h4>
  <p>
    Unfortunately defining environment variables can be quite painful in
    windows. Type <code>win</code>+<code>r</code> to bring up a run prompt and
    then type:
  </p>
  <pre>%windir%\System32\rundll32.exe sysdm.cpl,EditEnvironmentVariables</pre>
  <p>
    And hit enter. You should see a window with 2 sections. In the top section
    (User variables)
    click New and use this information:
  </p>
  <pre>Variable name:  GOPATH
Variable value: %USERPROFILE%</pre>
  <p>
    Click OK.
  </p>
  <p>
    We also want to update the <code>PATH</code> variable so we can use programs
    installed by <code>go get</code> directly. If a variable named
    <code>PATH</code> (case doesn't matter) already exists then select it, click
    edit, and add to the end of the value: (make sure to include the semicolon)
  </p>
  <pre>;%GOPATH%\bin</pre>
  <p>
    If <code>PATH</code> doesn't already exist. Then click new and use this
    information:
  </p>
  <pre>Variable name:  PATH
Variable value: %GOPATH%\bin</pre>
  <h4>Folder</h4>
  <p>
    Open up a git shell (right click on your desktop and choose <q>Git Bash</q>)
    and run:
  </p>
  <pre>mkdir -p ~/src</pre>
  <p>
    This is where we will store go programs. Let's verify that everything is
    working properly by running this command:
  </p>
  <pre>go get github.com/k0kubun/tetris ; tetris</pre>
  <p>
    And you can play tetris. Type <code>q</code> to get back to the prompt.
  </p>
  <h4>Install Go Tools</h4>
  <p>
    There are several additional go tools which are quite useful. You can
    install them by running:
  </p>
  <pre>go get golang.org/x/tools/cmd/...</pre>

  <h3 id="windows-install-atom">Install Atom</h3>
  <p>
    GitHub's <a href="https://atom.io">Atom</a> is an excellent general purpose
    text editor which also has a very good Go plugin. Download the windows
    installer from
    <a href="https://atom.io/download/windows">atom.io/download/windows</a> and
    run it.
  </p>
  <p>
    For better go support we need to install the
    <a href="https://github.com/joefitzgerald/go-plus">go-plus</a> plugin. Open
    Atom, go to <q>File</q> -> <q>Settings</q> -> <q>Install</q>, search for
    <q>go-plus</q> and click <q>Install</q>.
  </p>

  <h3 id="windows-create-file">Create a Program</h3>
  <p>
    In Atom go to <q>File</q> -> <q>Open Folder...</q> and browse to: (replace
    USER with your username)
  </p>
  <pre>C:\Users\USER\src</pre>
  <p>
    Click <q>Select Folder</q>, right click on <code>src</code>, select
    <q>New Folder</q>, use the name <code>example</code> and then hit enter. On
    your new <code>example</code> folder, right click and select <q>New File</q>.
    Give it the name <code>example\main.go</code> and enter this:
  </p>
  <pre>package main

func main() {
  fmt.Println("hello world")
}</pre>
  <p>
    Save the file (<code>CTRL</code>+<code>s</code>) and the go plus plugin will
    automatically add <code>import "fmt"</code>. Open a git bash
    terminal and run the following:
  </p>
  <pre>go install example ; example</pre>
  <p>
    You should see <q>hello world</q>. If everything went well you now have
    everything you need to start writing go programs. Have fun!
  </p>

<!-- OSX -->

  <h2 id="osx">OSX</h2>

  <h3 id="osx-install-homebrew">Install Homebrew</h3>
  <p>
    <a href="http://brew.sh">Homebrew</a> is a package manager for OSX. To
    install it open a terminal (<code>CMD</code>+<code>space</code>, type
    <code>terminal</code> and then <code>enter</code>) and then paste the
    following command:
  </p>
  <pre>ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</pre>

  <h3 id="osx-install-git">Install Git</h3>
  <p>
    <a href="http://git-scm.com">Git</a> is a version control system used by
    most 3rd party Go packages. You can install it with Homebrew by running:
  </p>
  <pre>brew install git</pre>

  <h3 id="osx-install-go">Install Go</h3>
  <p>
    The go toolchain is required to build go programs. You can download an
    installer from <a href="https://golang.org/dl/">golang.org/dl</a>. Choose
    the latest version available for OSX (eg
    <code>go1.4.2.darwin-amd64-osx10.8.pkg</code>) and run it.
  </p>

  <h3 id="osx-setup-gopath">Setup GOPATH</h3>
  <p>
    Go looks for source code, packages and binaries in two places:
    <code>GOROOT</code> and <code>GOPATH</code>. <code>GOROOT</code> was already
    setup by the installer, but we need to define <code>GOPATH</code>.
  </p>
  <p>
    Open a terminal and enter:
  </p>
  <pre>nano ~/.bashrc</pre>
  <p>
    Nano is a simple text editor and <code>.bashrc</code> is a file loaded by
    your shell. Add the following to the bottom of the file:
  </p>
  <pre>export GOPATH=$HOME
export PATH=$PATH:$GOPATH/bin</pre>
  <p>
    Save the file by hitting <code>ctrl</code>+<code>o</code>, <code>enter</code>
    and then <code>ctrl</code>+<code>x</code>. Now you should be back at the
    command prompt and you can pickup the environment changes by entering the
    following:
  </p>
  <pre>source ~/.bashrc</pre>
  <p>
    Let's verify that everything is working properly by running this command:
  </p>
  <pre>go get github.com/k0kubun/tetris ; tetris</pre>
  <img class="autoscale" src="{{public_link "img/guides/osx-install-tetris.png"}}">
  <p>
    And you can play tetris. Type <code>q</code> to get back to the terminal.
  </p>

  <h3 id="osx-atom">Install Atom</h3>
  <p>
    Theoretically you could use nano to edit files, but you'd be better off
    using an editor with more features. GitHub's
    <a href="https://atom.io">Atom</a>
    is an excellent general purpose text editor which also has a very good Go
    plugin. Download it from
    <a href="https://atom.io/download/mac">atom.io/download/mac</a> and install
    it by dragging it to your Applications folder in Finder.
  </p>
  <img class="autoscale" src="{{public_link "img/guides/osx-install-atom.png"}}">
  <p>
    Open Atom and select <q>Atom</q> -> <q>Install Shell Commands</q>. Now exit
    Atom, go to a terminal and type:
  </p>
  <pre>cd ~/src ; atom</pre>
  <p>
    We need to start Atom in this way so that it will pick up our environmental
    variables. (Crucially we need GOPATH set)
  </p>
  <p>
    For better go support we also need to install the <q>autocomplete-plus</q>
    and <q>go-plus</q> plugins. Go to <q>Atom</q> -> <q>Preferences...</q> ->
    <q>Install</q>, search for <q>autocomplete-plus</q> and click <q>Install</q>
    (it may be a ways down the list), after that is done search for
    <q>go-plus</q> and click <q>Install</q>.
  </p>

  <h3 id="osx-create-program">Create a Program</h3>
  <p>
    Right click on <code>src</code>, select <q>New Folder</q>, use the name
    <code>example</code> and then hit enter. On your new <code>example</code>
    folder, right click and select <q>New File</q>. Give it the name
    <code>example/main.go</code> and enter this:
  </p>
  <pre>package main

func main() {
  fmt.Println("hello world")
}</pre>
  <img class="autoscale" src="{{public_link "img/guides/osx-atom.png"}}">
  <p>
    Save the file (<code>CMD</code>+<code>s</code>) and the go-plus plugin will
    automatically add <code>import "fmt"</code>. Open a terminal and run the
    following:
  </p>
  <pre>go install example ; example</pre>
  <p>
    You should see <q>hello world</q>. If everything went well you now have
    everything you need to start writing go programs. Have fun!
  </p>
</div>
