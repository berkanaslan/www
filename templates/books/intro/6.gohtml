<div class="book body container">

  <h1>Arrays, Slices and Maps</h1><p>In chapter 3 we learned about Go&#39;s basic types. In this chapter we will look at three more built-in types: arrays, slices and maps.</p>
<h2 id="section1">Arrays</h2><p>An array is a numbered sequence of elements of a single type with a fixed length. In Go they look like this:</p>
<pre>var x [5]int</pre><p><code>x</code> is an example of an array which is composed of 5 <code>int</code>s. Try running the following program:</p>
<pre>package main

import &#34;fmt&#34;

func main() {
  var x [5]int
  x[4] = 100
  fmt.Println(x)
}</pre><p>You should see this:</p>
<pre>[0 0 0 0 100]</pre><p><code>x[4] = 100</code> should be read “set the 5th element of the array x to 100”. It might seem strange that <code>x[4]</code> represents the 5th element instead of the 4th but like strings, arrays are indexed starting from 0. Arrays are accessed in a similar way. We could change <code>fmt.Println(x)</code> to <code>fmt.Println(x[4])</code> and we would get 100.</p>
<p>Here&#39;s an example program that uses arrays:</p>



<pre>func main() {
  var x [5]float64
  x[0] = 98
  x[1] = 93
  x[2] = 77
  x[3] = 82
  x[4] = 83

  var total float64 = 0
  for i := 0; i &lt; 5; i++ {
    total += x[i]
  }
  fmt.Println(total / 5)
}</pre><p>This program computes the average of a series of test scores. If you run it you should see <code>86.6</code>. Let&#39;s walk through the program:</p>
<ul><li><p>First we create an array of length 5 to hold our test scores, then we fill up each element with a grade</p>
</li><li><p>Next we setup a for loop to compute the total score</p>
</li><li><p>Finally we divide the total score by the number of elements to find the average</p>

</li></ul><p>This program works, but Go provides some features we can use to improve it. First these 2 parts: <code>i &lt; 5</code> and <code>total / 5</code> should throw up a red flag for us. Say we changed the number of grades from 5 to 6. We would also need to change both of these parts. It would be better to use the length of the array instead:</p>
<pre>var total float64 = 0
for i := 0; i &lt; len(x); i++ {
  total += x[i]
}
fmt.Println(total / len(x))</pre><p>Go ahead and make these changes and run the program. You should get an error:</p>
<pre>$ go run tmp.go
# command-line-arguments
.\tmp.go:19: invalid operation: total / 5 (mismatched types float64 and int)</pre><p>The issue here is that <code>len(x)</code> and <code>total</code> have different types. <code>total</code> is a <code>float64</code> while <code>len(x)</code> is an <code>int</code>. So we need to convert <code>len(x)</code> into a <code>float64</code>:</p>
<pre>fmt.Println(total / float64(len(x)))</pre><p>This is an example of a type conversion. In general to convert between types you use the type name like a function.</p>
<p>Another change to the program we can make is to use a special form of the for loop:</p>
<pre>var total float64 = 0
for i, value := range x {
  total += value
}
fmt.Println(total / float64(len(x)))</pre><p>In this for loop <code>i</code> represents the current position in the array and <code>value</code> is the same as <code>x[i]</code>. We use the keyword <code>range</code> followed by the name of the variable we want to loop over.</p>
<p>Running this program will result in another error:</p>
<pre>$ go run tmp.go
# command-line-arguments
.\tmp.go:16: i declared and not used</pre><p>The Go compiler won&#39;t allow you to create variables that you never use. Since we don&#39;t use <code>i</code> inside of our loop we need to change it to this:</p>
<pre>var total float64 = 0
for _, value := range x {
  total += value
}
fmt.Println(total / float64(len(x)))</pre><p>A single <code>_</code> (underscore) is used to tell the compiler that we don&#39;t need this. (In this case we don&#39;t need the iterator variable)</p>
<p>Go also provides a shorter syntax for creating arrays:</p>
<pre>x := [5]float64{ 98, 93, 77, 82, 83 }</pre><p>We no longer need to specify the type because Go can figure it out. Sometimes arrays like this can get too long to fit on one line, so Go allows you to break it up like this:</p>
<pre>x := [5]float64{
  98,
  93,
  77,
  82,
  83,
}</pre><p>Notice the extra trailing <code>,</code> after <code>83</code>. This is required by Go and it allows us to easily remove an element from the array by commenting out the line:</p>
<pre>x := [4]float64{
  98,
  93,
  77,
  82,
  // 83,
}</pre><h2 id="section2">Slices</h2><p>A slice is a segment of an array. Like arrays slices are indexable and have a length. Unlike arrays this length is allowed to change. Here&#39;s an example of a slice:</p>
<pre>var x []float64</pre><p>The only difference between this and an array is the missing length between the brackets. In this case <code>x</code> has been created with a length of <code>0</code>.</p>
<p>If you want to create a slice you should use the built-in <code>make</code> function:</p>
<pre>x := make([]float64, 5)</pre><p>This creates a slice that is associated with an underlying <code>float64</code> array of length 5. Slices are always associated with some array, and although they can never be longer than the array, they can be smaller. The <code>make</code> function also allows a 3rd parameter:</p>
<pre>x := make([]float64, 5, 10)</pre><p>10 represents the capacity of the underlying array which the slice points to:</p>
<p><img class="block" src="{{public_link "img/intro/10000000000001740000006A3733A30E.png"}}" />Another way to create slices is to use the <code>[low : high]</code> expression:</p>
<pre>arr := [5]float64{1,2,3,4,5}
x := arr[0:5]</pre><p><code>low</code> is the index of where to start the slice and <code>high</code> is the index where to end it (but not including the index itself). For example while <code>arr[0:5]</code> returns <code>[1,2,3,4,5]</code>, <code>arr[1:4]</code> returns <code>[2,3,4]</code>.</p>
<p>For convenience we are also allowed to omit <code>low</code>, <code>high</code> or even both <code>low</code> and <code>high</code>. <code>arr[0:]</code> is the same as <code>arr[0:len(arr)]</code>, <code>arr[:5]</code> is the same as <code>arr[0:5]</code> and <code>arr[:]</code> is the same as <code>arr[0:len(arr)]</code>.</p>
<h3>Slice Functions</h3>

<p>Go includes two built-in functions to assist with slices: <code>append</code> and <code>copy</code>. Here is an example of <code>append</code>:</p>
<pre>func main() {
  slice1 := []int{1,2,3}
  slice2 := append(slice1, 4, 5)
  fmt.Println(slice1, slice2)
}</pre><p>After running this program <code>slice1</code> has <code>[1,2,3]</code> and <code>slice2</code> has <code>[1,2,3,4,5]</code>. <code>append</code> creates a new slice by taking an existing slice (the first argument) and appending all the following arguments to it. </p>
<p>Here is an example of copy:</p>
<pre>func main() {
  slice1 := []int{1,2,3}
  slice2 := make([]int, 2)
  copy(slice2, slice1)
  fmt.Println(slice1, slice2)
}</pre><p>After running this program <code>slice1</code> has <code>[1,2,3]</code> and <code>slice2</code> has <code>[1,2]</code>. The contents of <code>slice1</code> are copied into <code>slice2</code>, but since <code>slice2</code> has room for only two elements only the first two elements of <code>slice1</code> are copied.</p>
<h2 id="section3">Maps</h2><p>A map is an unordered collection of key-value pairs. Also known as an associative array, a hash table or a dictionary, maps are used to look up a value by its associated key. Here&#39;s an example of a map in Go:</p>
<pre>var x map[string]int</pre><p>The map type is represented by the keyword <code>map</code>, followed by the key type in brackets and finally the value type. If you were to read this out loud you would say “<code>x</code> is a map of <code>string</code>s to <code>int</code>s.” </p>
<p>Like arrays and slices maps can be accessed using brackets. Try running the following program:</p>
<pre>var x map[string]int
x[&#34;key&#34;] = 10
fmt.Println(x)</pre><p>You should see an error similar to this:</p>
<pre>panic: runtime error: assignment to entry in nil map

goroutine 1 [running]:
main.main()
main.go:7 +0x4d

goroutine 2 [syscall]:
created by runtime.main
      C:/Users/ADMINI~1/AppData/Local/Temp/2/bindi
t269497170/src/pkg/runtime/proc.c:221
exit status 2</pre><p>Up till now we have only seen compile-time errors. This is an example of a runtime error. As the name would imply, runtime errors happen when you run the program, while compile-time errors happen when you try to compile the program.</p>
<p>The problem with our program is that maps have to be initialized before they can be used. We should have written this:</p>
<pre>x := make(map[string]int)
x[&#34;key&#34;] = 10
fmt.Println(x[&#34;key&#34;])</pre><p>If you run this program you should see <code>10</code> displayed. The statement <code>x[&#34;key&#34;] = 10</code> is similar to what we saw with arrays but the key, instead of being an integer, is a string because the map&#39;s key type is <code>string</code>. We can also create maps with a key type of <code>int</code>:</p>
<pre>x := make(map[int]int)
x[1] = 10
fmt.Println(x[1])</pre><p>This looks very much like an array but there are a few differences. First the length of a map (found by doing <code>len(x)</code>) can change as we add new items to it. When first created it has a length of 0, after <code>x[1] = 10</code> it has a length of 1. Second maps are not sequential. We have <code>x[1]</code>, and with an array that would imply there must be an <code>x[0]</code>, but maps don&#39;t have this requirement.</p>
<p>We can also delete items from a map using the built-in <code>delete</code> function:</p>
<pre>delete(x, 1)</pre><p>Let&#39;s look at an example program that uses a map:</p>
<pre>package main

import &#34;fmt&#34;

func main() {
  elements := make(map[string]string)
  elements[&#34;H&#34;] = &#34;Hydrogen&#34;
  elements[&#34;He&#34;] = &#34;Helium&#34;
  elements[&#34;Li&#34;] = &#34;Lithium&#34;
  elements[&#34;Be&#34;] = &#34;Beryllium&#34;
  elements[&#34;B&#34;] = &#34;Boron&#34;
  elements[&#34;C&#34;] = &#34;Carbon&#34;
  elements[&#34;N&#34;] = &#34;Nitrogen&#34;
  elements[&#34;O&#34;] = &#34;Oxygen&#34;
  elements[&#34;F&#34;] = &#34;Fluorine&#34;
  elements[&#34;Ne&#34;] = &#34;Neon&#34;

  fmt.Println(elements[&#34;Li&#34;])
}</pre><p><code>elements</code> is a map that represents the first 10 chemical elements indexed by their symbol. This is a very common way of using maps: as a lookup table or a dictionary. Suppose we tried to look up an element that doesn&#39;t exist:</p>
<pre>fmt.Println(elements[&#34;Un&#34;])</pre><p>If you run this you should see nothing returned. Technically a map returns the zero value for the value type (which for strings is the empty string). Although we could check for the zero value in a condition (<code>elements[&#34;Un&#34;] == &#34;&#34;</code>) Go provides a better way:</p>
<pre>name, ok := elements[&#34;Un&#34;]
fmt.Println(name, ok)</pre><p>Accessing an element of a map can return two values instead of just one. The first value is the result of the lookup, the second tells us whether or not the lookup was successful. In Go we often see code like this:</p>
<pre>if name, ok := elements[&#34;Un&#34;]; ok {
  fmt.Println(name, ok)
}</pre><p>First we try to get the value from the map, then if it&#39;s successful we run the code inside of the block. </p>
<p>Like we saw with arrays there is also a shorter way to create maps:</p>
<pre>elements := map[string]string{
  &#34;H&#34;:  &#34;Hydrogen&#34;,
  &#34;He&#34;: &#34;Helium&#34;,
  &#34;Li&#34;: &#34;Lithium&#34;,
  &#34;Be&#34;: &#34;Beryllium&#34;,
  &#34;B&#34;:  &#34;Boron&#34;,
  &#34;C&#34;:  &#34;Carbon&#34;,
  &#34;N&#34;:  &#34;Nitrogen&#34;,
  &#34;O&#34;:  &#34;Oxygen&#34;,
  &#34;F&#34;:  &#34;Fluorine&#34;,
  &#34;Ne&#34;: &#34;Neon&#34;,
}</pre><p>Maps are also often used to store general information. Let&#39;s modify our program so that instead of just storing the name of the element we store its standard state (state at room temperature) as well:</p>
<pre>func main() {
  elements := map[string]map[string]string{
    &#34;H&#34;: map[string]string{
      &#34;name&#34;:&#34;Hydrogen&#34;,
      &#34;state&#34;:&#34;gas&#34;,
    },
    &#34;He&#34;: map[string]string{
      &#34;name&#34;:&#34;Helium&#34;,
      &#34;state&#34;:&#34;gas&#34;,
    },
    &#34;Li&#34;: map[string]string{
      &#34;name&#34;:&#34;Lithium&#34;,
      &#34;state&#34;:&#34;solid&#34;,
    },
    &#34;Be&#34;: map[string]string{
      &#34;name&#34;:&#34;Beryllium&#34;,
      &#34;state&#34;:&#34;solid&#34;,
    },
    &#34;B&#34;:  map[string]string{
      &#34;name&#34;:&#34;Boron&#34;,
      &#34;state&#34;:&#34;solid&#34;,
    },
    &#34;C&#34;:  map[string]string{
      &#34;name&#34;:&#34;Carbon&#34;,
      &#34;state&#34;:&#34;solid&#34;,
    },
    &#34;N&#34;:  map[string]string{
      &#34;name&#34;:&#34;Nitrogen&#34;,
      &#34;state&#34;:&#34;gas&#34;,
    },
    &#34;O&#34;:  map[string]string{
      &#34;name&#34;:&#34;Oxygen&#34;,
      &#34;state&#34;:&#34;gas&#34;,
    },
    &#34;F&#34;:  map[string]string{
      &#34;name&#34;:&#34;Fluorine&#34;,
      &#34;state&#34;:&#34;gas&#34;,
    },
    &#34;Ne&#34;:  map[string]string{
      &#34;name&#34;:&#34;Neon&#34;,
      &#34;state&#34;:&#34;gas&#34;,
    },
  }

  if el, ok := elements[&#34;Li&#34;]; ok {
    fmt.Println(el[&#34;name&#34;], el[&#34;state&#34;])
  }
}</pre><p>Notice that the type of our map has changed from <code>map[string]string</code> to <code>map[string]map[string]string</code>. We now have a map of strings to maps of strings to strings. The outer map is used as a lookup table based on the element&#39;s symbol, while the inner maps are used to store general information about the elements. Although maps are often used like this, in chapter 9 we will see a better way to store structured information.</p>


<h3>Problems</h3>

<ul><li><p>How do you access the 4th element of an array or slice?</p>
</li><li><p>What is the length of a slice created using: <code>make([]int, 3, 9)</code>?</p>
</li><li><p>Given the array:</p>
<pre>x := [6]string{&#34;a&#34;,&#34;b&#34;,&#34;c&#34;,&#34;d&#34;,&#34;e&#34;,&#34;f&#34;}</pre><p>what would <code>x[2:5]</code> give you?</p>
</li><li><p>Write a program that finds the smallest number in this list:</p>
<pre>x := []int{
  48,96,86,68,
  57,82,63,70,
  37,34,83,27,
  19,97, 9,17,
}</pre>
</li></ul>

<table class="paging">
  <tr>
    <td class="prev"><a href="/books/intro/5">&larr; Previous</a></td>
    <td><a href="/books/intro">Index</a></td>
    <td class="next"><a href="/books/intro/7">Next &rarr;</a></td>
  </tr>
</table>

</div>
